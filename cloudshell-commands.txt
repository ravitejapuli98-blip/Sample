# AI Sustainable Cities Planner - CloudShell Commands
# Copy and paste these commands one by one into AWS CloudShell

# 1. Set variables
export AWS_REGION="us-east-1"
export ECR_REPO="sustainable-cities-backend"
export ECR_URI="061309713243.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO"

# 2. Create project directory
mkdir -p sustainable-cities-planner
cd sustainable-cities-planner

# 3. Create backend structure
mkdir -p backend/app
cd backend

# 4. Create main.py
cat > app/main.py << 'EOF'
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

app = FastAPI(
    title="AI Sustainable Cities Planner",
    description="Multi-agent simulation and planning tool for sustainable urban development",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "AI Sustainable Cities Planner API", "status": "running"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "sustainable-cities-planner"}

@app.get("/api/v1/cities")
async def get_cities():
    return {
        "cities": [
            {
                "id": 1,
                "name": "San Francisco",
                "population": 873965,
                "area_km2": 121.4,
                "emissions_tonnes_co2": 2500000,
                "air_quality_index": 45
            }
        ]
    }

@app.get("/api/v1/policies")
async def get_policies():
    return {
        "policies": [
            {
                "id": 1,
                "name": "Bus Lane Expansion",
                "type": "transportation",
                "description": "Expand dedicated bus lanes to improve public transit efficiency",
                "estimated_cost": 50000000,
                "co2_reduction_percent": 15
            }
        ]
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

# 5. Create requirements.txt
cat > requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6
requests==2.31.0
EOF

# 6. Create Dockerfile
cat > Dockerfile << 'EOF'
FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY app/ ./app/

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
EOF

# 7. Login to ECR
aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI

# 8. Build image
docker build -t $ECR_REPO .

# 9. Tag image
docker tag $ECR_REPO:latest $ECR_URI:latest

# 10. Push image
docker push $ECR_URI:latest

# 11. Update ECS service
aws ecs update-service \
    --cluster prod-sus-cities-cluster \
    --service prod-sus-cities-service \
    --force-new-deployment \
    --region $AWS_REGION

echo "🎉 Deployment complete!"
echo "🌐 Application URL: http://prod-sus-cities-alb-73707419.us-east-1.elb.amazonaws.com"
